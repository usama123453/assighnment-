 
Your Task: You don't need to read input or print anything. Your task is to complete the function longestSubstrDitinctChars() which takes the string S as input and returns the length of the longest substring with all distinct characters.
 Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(1).
 Constraints: 1<=|S|<=105

def longestSubstrDitinctChars (str): 
    window = {}
 
    # stores the longest substring boundaries
    begin = end = 0
 
    # `[low…high]` maintain the sliding window boundaries
    low = high = 0
 
    while high < len(str):
 
        # if the current character is present in the current window
        if window.get(str[high]):
 
            # remove characters from the left of the window till
            # we encounter the current character
            while str[low] != str[high]:
                window[str[low]] = False
                low = low + 1
 
            low = low + 1        # remove the current character
        else:
            # if the current character is not present in the current
            # window, include it
            window[str[high]] = True
 
            # update the maximum window size if necessary
            if end - begin < high - low:
                begin = low
                end = high
 
        high = high + 1
 
    # return the longest substring found at `str[begin…end]`
    return str[begin:end + 1]
  
if __name__ == '__main__':
 
    str = "  "

print(longestSubstrDitinctChars())
